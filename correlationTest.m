clear all; % Clears old variables.
clc; % Clears command window.
clf; % Clears figures.
%close all; % Closes any open windows.

%% LaTeX stuff.
set(groot, 'defaultAxesTickLabelInterpreter','latex');
set(groot, 'defaultTextInterpreter','latex');
set(groot, 'defaultLegendInterpreter','latex');

% Specify the 'prefix' folder, i.e. not the name generated by the Fortran program.
%prefix = '';
%prefix = 'automatedRun/512/';
prefix = 'debug/';
%prefix = 'recreation/';
%prefix = 'J_str/';
%prefix = 'PBCvsFBC/';
%prefix = 'solventDistribution/';
%prefix = 'topView/';
%prefix = 'topView-Emilio/';

% Hardcode folder (mostly for debugging).
%folder = 'lambda_1-L_256-J_0.0000_1.0000_6.0000-numIters_2-28-initialDist_60_20_20-U_2.0000-PBC';

% Declare global variables
global lambda L directory f export skipFrames skipFramesOverride J

J = [0 1 6; 1 0 1; 6 1 0];

% Some settings for file exporting.
export = false; f = 'png'; %Turns on the frame export of type 'f' - supports pdf, png or gif!

% Various settings related to the visualisation of the data.
skipFrames = 1; skipFramesOverride = true; %The number of .dat files to skip (and thus also the number of data points).
fontSize = 18; % 14 for 0.5\linewidth; 21 for 0.33\linewidth (for 1:1 scale - try 18 if it's too large)
xDir = true; yDir = false;

% Run the folder selector if necessary and extract the parameters from the directory name.
if exist('folder') == 0
    folder = listDirs(prefix);
end
directory = [prefix folder];
[lambda, L, numIters] = findParamaters(directory,0);

% Run the preChecks function which does some initial debugging.
preChecks;

% Query the folder to determine the number of .dat files.
a = dir([directory '/*.dat']); b = numel(a); clc;

for n = 1:skipFrames:b
    % Import the raw data.
    frame = importdata([directory '/frame-' num2str(n) '.dat']);
    
    % These quantities are the concentration of zeros (for the whole lattice) and the number of MCS.
    c0(n) = 1 - nnz(frame)/numel(frame); MCS(n) = numIters*(n-1)/(size(frame,1)*size(frame,2));
    
    % Provide basic feedback to the user
    if mod(n,10) == 0 || n == 1
        clc; fprintf(['Percentage complete: ' num2str(round((n/b)*100,0)) '%%\n'])
    end
    
    % Calculate the correlation function?
    correlationX(n) = calcCorrelation(frame,1)/(L/lambda)^2;
    correlationY(n) = calcCorrelation(frame,2)/(L/lambda)^2;

end

%% Plotting
clc; clf; fprintf('Plotting...\n')

hold on
plot(MCS,correlationX,'ok','DisplayName',['$G_x$']);
plot(MCS,correlationY,'dk','DisplayName',['$G_y$']);
hold off

% Cosmetic plot stuff.
set(gca,'FontSize',fontSize)
xlabel('MCS')
ylabel('Correlation function (?)')
legend('-DynamicLegend','Location','southeast')

box on

xlim([min(MCS), max(MCS)]);
ylim([min([correlationX correlationY]),max([correlationX correlationY])]);

% %% Plotting
% clc; clf; fprintf('Plotting...\n')
% %cutoff = 80; %L = 1024; lambda = 4
% 
% %cutoff = 50; %L = 512; lambda = 2
% 
% %cutoff = 144; %topView; lambda = 2
% 
% cutoff = 65; %L = 256
% %cutoff = 260; %L = 128; 0.6
% %cutoff = 260; %L = 128; 0.8
% 
% %cutoff = 10; %debug
% 
% lMCS = log(MCS');
% if xDir == true
%     lcorrX = log(correlationX');
%     fun = fit(lMCS(2:end-cutoff),lcorrX(2:end-cutoff),'poly1'); coeffs = coeffvalues(fun);
% end
% if yDir == true
%     lcorrY = log(correlationY');
%     fun2 = fit(lMCS(2:end-cutoff),lcorrY(2:end-cutoff),'poly1'); coeffs2 = coeffvalues(fun2);
% end
% 
% if cutoff > 0
%     if xDir == true
%         fun3 = fit(lMCS(end-cutoff+1:end),lcorrX(end-cutoff+1:end),'poly1'); coeffs3 = coeffvalues(fun3);
%     end
%     if yDir == true
%         fun4 = fit(lMCS(end-cutoff+1:end),lcorrX(end-cutoff+1:end),'poly1'); coeffs4 = coeffvalues(fun4);
%     end
%     X2 = [min(lMCS(end-cutoff+1:end)):0.01:max(lMCS(end-cutoff+1:end))]';
% end
% %X = [min(lMCS(2:end)):0.01:max(lMCS)]';
% X = [min(lMCS(2:end)):0.01:max(lMCS(1:end-cutoff))]';
% 
% % Plotting
% set(gca,'FontSize',fontSize)
% hold on
% if cutoff > 0
%     if xDir == true
%         plot(lMCS(1:end-cutoff),lcorrX(1:end-cutoff),'o', 'Color', [0 0 0] + 0.70,'HandleVisibility','off');
%         plot(lMCS(end-cutoff+1:end),lcorrX(end-cutoff+1:end),'ok','DisplayName',['$R_x$']);
%     end
%     if yDir == true
%         plot(lMCS(1:end-cutoff),lcorrY(1:end-cutoff),'d', 'Color', [0 0 0] + 0.70,'HandleVisibility','off');
%         plot(lMCS(end-cutoff+1:end),lcorrY(end-cutoff+1:end),'dk','DisplayName',['$R_y$']);
%     end
% else
%     if xDir == true
%         plot(lMCS,lcorrX,'ok','DisplayName',['$R_x$']);
%     end
%     if yDir == true
%         plot(lMCS,lcorrY,'dk','DisplayName',['$R_y$']);
%     end
% end
% ws = warning('off','all');  % Turn off warnings.
% % if xDir == true
% %     plot(X,fun(X),'-b','lineWidth',1.5,'DisplayName',['Fit: $y = ' num2str(round(exp(coeffs(2)),2)) '\cdot x^{' num2str(round(coeffs(1),2)) '}$']);
% % end
% % if yDir == true
% %     plot(X,fun2(X),'-b','DisplayName',['Fit: $y = ' num2str(round(exp(coeffs2(2)),2)) '\cdot x^{' num2str(round(coeffs2(1),2)) '}$']);
% % end
% if cutoff > 0
%     if xDir == true
%         plot(X2,fun3(X2),'-m','lineWidth',1.5,'DisplayName',['Fit: $y = ' num2str(round(exp(coeffs3(2)),2)) '\cdot x^{' num2str(round(coeffs3(1),2)) '}$']);
%     end
%     if yDir == true
%         %plot(X2,fun4(X2),'-g','lineWidth',1.5,'DisplayName',['Fit: $y = ' num2str(round(exp(coeffs4(2)),2)) '\cdot x^{' num2str(round(coeffs4(1),2)) '}$']);
%     end
% end
% warning(ws)  % Turn them back on.
% 
% % Cosmetic plot stuff.
% xlabel('MCS $[\ln]$')
% ylabel('Correlation function $[\ln]$')
% 
% legend('-DynamicLegend','Location','northwest')
% box on
% 
% xlim([min(lMCS), max(lMCS)]);
% %ylim([min(lcorrX(2:end)), max(lcorrX(2:end))]);
% xticks([]); yticks([]); yticklabels({}); xticklabels({});

if export ~= true
    set(gcf,'Units','pixels');
    set(gcf,'Position', [0 0 550 400])
    set(gcf,'color','w');
    tightfig;
else
    set(gcf,'Units','pixels');
    set(gcf,'Position', [0 0 550 400])
    set(gcf,'color','w');
    tightfig;
    fig = gcf;
    filename = [directory '-correlationTest.' f];
    
    if sum(f == 'png') == 3
        frame = getframe(fig);
        im = frame2im(frame);
        [imind,cm] = rgb2ind(im,256);
        imwrite(imind,cm,filename,f);
    elseif sum(f == 'pdf') == 3
        set(fig,'Units','Inches');
        pos = get(fig,'Position');
        set(fig,'PaperPositionMode','Auto','PaperUnits','Inches','PaperSize',[pos(3), pos(4)])
        print(fig,filename,'-dpdf','-r0')
    end
end

%% Functions
% This function does some initial debugging to catch any obvious mistakes, such as the directory being empty.
function preChecks
    global directory f export skipFrames skipFramesOverride
    a = dir([directory '/*.dat']);
    b = numel(a);
    if b == 0
        error('Empty directory...\nAborting!',class(b)) %Throws an error and aborts. Note that the class(b) is necessary for MATLAB to parse the /n for.. reasons.
    end
    fprintf(['\nThe number of .dat files in the directory is ' num2str(b) '.\n'])

    % Set initial conditionals for the main loop.
    if export == true
        if skipFrames ~= 1 && skipFramesOverride ~= true
            fprintf('\n')
            warning('skipFrames has been set to 1.',class(a))
            skipFrames = 1;
        elseif skipFrames ~= 1 && skipFramesOverride == true
            fprintf('\n')
            warning('Inadvisable setting: skipFrames ~= 1.\nConsider setting skipFramesOverride to false.',class(a))
        end
        fprintf('\n')
        warning(['Will export frames as .' f '.'],class(a))
    else
        fprintf('\nWill NOT export frames.\n');
    end
    fprintf(['\nAll of the pre-checks passed!\n'])
    x = input('\nIs this correct? (y/n) ', 's');
    if x == 'y'

    elseif x == 'n'
        error('Please adjust settings accordingly...\nAborting!',class(x))
    else
        error('Invalid input...\nAborting!',class(x))
    end
end

% This function calculates the truncated 2-point function is defined here: https://physics.stackexchange.com/questions/284404/why-do-spin-correlation-functions-in-ising-models-decay-exponentially-below-the
function correlation = calcCorrelation(frame,t)
    global L lambda J
    
    correlation = 0;
    
    if t == 1
        for i = 1:L/lambda-2
            for j = 1:L/lambda-1
                for x1 = i*lambda:(i+1)*lambda
                    for x2 = j*lambda:(j+1)*lambda
                        %correlation = correlation + frame(x1,x2)*frame(x1+1,x2);
                        correlation = correlation + J(frame(x1,x2) + 2,frame(x1+1,x2) + 2);
                    end
                end
            end
        end
    else
        for i = 1:L/lambda-1
            for j = 1:L/lambda-2
                for x1 = i*lambda:(i+1)*lambda
                    for x2 = j*lambda:(j+1)*lambda
                        %correlation = correlation + frame(x1,x2)*frame(x1,x2+1);
                        correlation = correlation + J(frame(x1,x2) + 2,frame(x1,x2+1) + 2);
                    end
                end
            end
        end
    end
end